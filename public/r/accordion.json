{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "title": "Accordion",
  "description": "A set of collapsible panels with headings.",
  "dependencies": [
    "@base-ui-components/react"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/ui/accordion.tsx",
      "content": "\"use client\";\n\nimport { Accordion as AccordionPrimitive } from \"@base-ui-components/react/accordion\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { ChevronDownIcon, PlusIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst accordionItemVariants = cva(\"border-b\", {\n  variants: {\n    variant: {\n      underline: \"last:border-b-0\",\n      contained: \"border-0 my-2\",\n      outline: \"border rounded-md my-2\",\n    },\n  },\n  defaultVariants: {\n    variant: \"underline\",\n  },\n});\n\nconst accordionTriggerVariants = cva(\n  \"flex flex-1 items-start justify-between gap-4 text-sm text-left font-medium transition-all outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50 rounded-md\",\n  {\n    variants: {\n      variant: {\n        underline: \"py-3 hover:underline [&[data-panel-open]>svg]:rotate-180\",\n        contained:\n          \"group relative items-center bg-background hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50 py-2 pr-1 pl-3 focus-visible:z-10 data-[panel-open]:bg-accent dark:data-[panel-open]:bg-accent/50\",\n        outline:\n          \"py-2 px-4 hover:underline [&[data-panel-open]>svg]:rotate-180\",\n      },\n    },\n    defaultVariants: {\n      variant: \"underline\",\n    },\n  },\n);\n\nconst accordionPanelContentVariants = cva(\"text-sm\", {\n  variants: {\n    variant: {\n      underline: \"pt-0 pb-4\",\n      contained: \"py-2 px-3 text-muted-foreground rounded-md\",\n      outline: \"pt-0 pb-4 px-4\",\n    },\n  },\n  defaultVariants: {\n    variant: \"underline\",\n  },\n});\n\ntype AccordionContextValue = {\n  variant: VariantProps<typeof accordionTriggerVariants>[\"variant\"];\n};\n\nconst AccordionContext = React.createContext<AccordionContextValue | undefined>(\n  undefined,\n);\n\nfunction useAccordionContext() {\n  const context = React.useContext(AccordionContext);\n  if (!context) {\n    throw new Error(\"Accordion components must be used within <Accordion>\");\n  }\n  return context;\n}\n\nfunction Accordion({\n  variant = \"underline\",\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root> &\n  VariantProps<typeof accordionTriggerVariants>) {\n  return (\n    <AccordionContext.Provider value={{ variant }}>\n      <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n    </AccordionContext.Provider>\n  );\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  const { variant } = useAccordionContext();\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(accordionItemVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  const { variant } = useAccordionContext();\n  return (\n    <AccordionPrimitive.Trigger\n      data-slot=\"accordion-trigger\"\n      className={cn(accordionTriggerVariants({ variant }), className)}\n      {...props}\n    >\n      {children}\n      {variant === \"contained\" ? (\n        <PlusIcon className=\"group-hover:text-foreground text-muted-foreground mr-2 size-4 shrink-0 transition-all ease-out group-data-[panel-open]:rotate-45 data-[panel-open]:text-foreground\" />\n      ) : (\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      )}\n    </AccordionPrimitive.Trigger>\n  );\n}\n\nfunction AccordionHeader(\n  props: React.ComponentProps<typeof AccordionPrimitive.Header>,\n) {\n  return (\n    <AccordionPrimitive.Header\n      data-slot=\"accordion-header\"\n      className=\"flex\"\n      {...props}\n    />\n  );\n}\n\nfunction AccordionPanel({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Panel>) {\n  const { variant } = useAccordionContext();\n  return (\n    <AccordionPrimitive.Panel\n      data-slot=\"accordion-panel\"\n      className={cn(\n        \"h-[var(--accordion-panel-height)] overflow-hidden text-sm transition-[height] ease-out\",\n        \"data-[ending-style]:h-0 data-[starting-style]:h-0\",\n      )}\n      {...props}\n    >\n      <div\n        className={cn(accordionPanelContentVariants({ variant }), className)}\n      >\n        {children}\n      </div>\n    </AccordionPrimitive.Panel>\n  );\n}\n\nexport {\n  Accordion,\n  AccordionHeader,\n  AccordionItem,\n  AccordionPanel,\n  AccordionTrigger,\n};\n",
      "type": "registry:ui"
    }
  ]
}