import type React from "react";

/**
 * Registry of all components and examples
 * Auto-generated by scripts/registry-sync.ts
 * DO NOT EDIT MANUALLY
 */
export type RegistryName = "utils" | "accordion" | "avatar" | "alert-dialog" | "dialog" | "tabs" | "scroll-area" | "popover" | "menu" | "autocomplete" | "input" | "button" | "accordion-contained" | "accordion-default-open-multiple" | "accordion-default-open-single" | "accordion-demo" | "accordion-disabled" | "accordion-outline" | "accordion-single" | "alert-dialog-custom" | "alert-dialog-demo" | "async" | "auto-highlight" | "autocomplete-demo" | "fuzzy-matching" | "grid-layout" | "grouped" | "inline" | "avatar-demo" | "button-default" | "button-demo" | "button-destructive" | "button-ghost" | "button-icon" | "button-link" | "button-loading" | "button-outline" | "button-render-as-link" | "button-rounded" | "button-secondary" | "button-size" | "button-with-icon" | "dialog-custom" | "dialog-demo" | "dialog-from-menu" | "input-demo" | "input-disabled" | "input-file" | "input-with-button" | "input-with-label" | "menu-basic-usage" | "menu-checkbox" | "menu-control" | "menu-demo" | "menu-dialog" | "menu-group" | "menu-match-anchor-width" | "menu-navigation" | "menu-nested" | "menu-open-on-hover" | "menu-radio" | "popover-demo" | "scroll-area-demo-horizontal-scrolling" | "scroll-area-demo" | "tabs-demo-vertical" | "tabs-demo" | "tabs-ghost-vertical" | "tabs-ghost" | "tabs-shadcn" | "tabs-solid-vertical" | "tabs-solid" | "tabs-underline-vertical" | "tabs-underline";

export interface RegistryFile {
  path: string;
  type: string;
  target?: string;
}

export interface RegistryEntry {
  name: string;
  description?: string;
  type: "registry:ui" | "registry:example" | "registry:lib" | "registry:hook";
  registryDependencies?: string[];
  files: RegistryFile[];
  component?: React.LazyExoticComponent<React.ComponentType<unknown>>;
  categories?: string[];
  meta?: Record<string, unknown>;
}

export type ComponentRegistry = Record<RegistryName, RegistryEntry>;

// Backward compatibility types
export type ComponentName = RegistryName;
export interface ComponentEntry extends RegistryEntry {
  component: React.LazyExoticComponent<React.ComponentType<unknown>>;
  src: string;
}
